{"version":3,"sources":["api.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostInfo/PostInfo.tsx","components/UpdatePostForm/UpdatePostForm.tsx","components/PostsList/PostsList.tsx","App.tsx","index.tsx"],"names":["url","getPosts","a","fetch","response","json","getComments","postId","addComment","body","method","headers","JSON","stringify","createPost","title","deletePost","id","updatePost","NewCommentForm","props","loadComments","selectedPostId","useState","comment","setComment","handleFormSubmit","event","preventDefault","onSubmit","className","onChange","target","value","type","name","placeholder","PostInfo","post","comments","setComments","commentsFromServer","useEffect","map","UpdatePostForm","setUpdatedPostId","loadPosts","newTitle","setNewTitle","newBody","setNewBody","updatePostInfo","onClick","PostsList","posts","setSelectedPostId","updatedPostId","addPost","removePost","required","App","setPosts","postsArray","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.51c513dc.chunk.js","sourcesContent":["const url = 'https://bloggy-api.herokuapp.com';\n\nexport async function getPosts(): Promise<Post[]> {\n  const response = await fetch(`${url}/posts`);\n\n  return response.json();\n}\n\nexport async function getComments(postId: number): Promise<PostComment[]> {\n  const response = await fetch(`${url}/comments?postId=${postId}`);\n\n  return response.json();\n}\n\nexport async function addComment(postId: number, body: string):Promise<PostComment> {\n  const response = await fetch(`${url}/comments`, {\n    method: 'POST',\n    headers: {\n      'content-type': 'application/json',\n    },\n    body: JSON.stringify({\n      postId,\n      body,\n    }),\n  });\n\n  return response.json();\n}\n\nexport async function createPost(title: string, body: string): Promise<Post> {\n  const response = await fetch(`${url}/posts`, {\n    method: 'POST',\n    headers: {\n      'content-type': 'application/json',\n    },\n    body: JSON.stringify({\n      title,\n      body,\n    }),\n  });\n\n  return response.json();\n}\n\nexport async function deletePost(id: number) {\n  const response = await fetch(`${url}/posts/${id}`, {\n    method: 'DELETE',\n  });\n\n  return response.json();\n}\n\nexport async function updatePost(\n  id: number,\n  title: string,\n  body: string,\n) {\n  const response = await fetch(`${url}/posts/${id}`, {\n    method: 'PUT',\n    headers: {\n      'content-type': 'application/json',\n    },\n    body: JSON.stringify({\n      title,\n      body,\n    }),\n  });\n\n  return response.json();\n}\n","import React, { useState } from 'react';\nimport { addComment } from '../../api';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  selectedPostId: number,\n  loadComments: () => Promise<void>,\n};\n\nexport const NewCommentForm: React.FC<Props> = (props) => {\n  const { loadComments, selectedPostId } = props;\n\n  const [comment, setComment] = useState('');\n\n  const clearForm = () => {\n    setComment('');\n  };\n\n  const handleFormSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    await addComment(selectedPostId, comment);\n    await loadComments();\n    clearForm();\n  };\n\n  return (\n    <form\n      onSubmit={handleFormSubmit}\n      className=\"new-comment-form\"\n    >\n      <div className=\"new-comment-form__field\">\n        <input\n          onChange={event => setComment(event.target.value)}\n          value={comment}\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your comment\"\n          className=\"new-comment-form__input\"\n        />\n        <button\n          type=\"submit\"\n          className=\"new-comment-form__submit-button\"\n        >\n          Add a comment\n        </button>\n      </div>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { getComments } from '../../api';\nimport './PostInfo.scss';\nimport { NewCommentForm } from '../NewCommentForm/NewCommentForm';\n\ntype Props = {\n  post: Post,\n  selectedPostId: number,\n};\n\nexport const PostInfo: React.FC<Props> = (props) => {\n  const { post, selectedPostId } = props;\n  const [comments, setComments] = useState<PostComment[]>([]);\n\n  const loadComments = async () => {\n    const commentsFromServer = await getComments(selectedPostId);\n\n    setComments(commentsFromServer);\n  };\n\n  useEffect(() => {\n    loadComments();\n  }, [selectedPostId]);\n\n  return (\n    <div className=\"post-info\">\n      <div className=\"post-info__id\">\n        <span className=\"post-info--title\">Post id:</span>\n        {' '}\n        {post.id}\n      </div>\n\n      <div className=\"post-info__body\">\n        <span className=\"post-info--title\">Body:</span>\n        {' '}\n        {post.body}\n      </div>\n\n      <ul className=\"post-info__comments-list\">\n        <div className=\"post-info__comments-title\">Comments:</div>\n        {comments.map(comment => (\n          <li key={comment.id} className=\"post-info__comment\">\n            {comment.body}\n          </li>\n        ))}\n      </ul>\n\n      <div className=\"post-info__add-comment-form\">\n        <NewCommentForm\n          selectedPostId={selectedPostId}\n          loadComments={loadComments}\n        />\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { updatePost } from '../../api';\nimport './UpdatePostForm.scss';\n\ntype Props = {\n  id: number,\n  setUpdatedPostId: React.Dispatch<React.SetStateAction<number>>;\n  loadPosts: () => Promise<void>;\n};\n\nexport const UpdatePostForm: React.FC<Props> = (props) => {\n  const {\n    id,\n    setUpdatedPostId,\n    loadPosts,\n  } = props;\n\n  const [newTitle, setNewTitle] = useState('');\n  const [newBody, setNewBody] = useState('');\n\n  const clearForm = () => {\n    setNewBody('');\n    setNewTitle('');\n  };\n\n  const updatePostInfo = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    await updatePost(id, newTitle, newBody);\n    await loadPosts();\n    clearForm();\n  };\n\n  return (\n    <form className=\"update-post-form\" onSubmit={updatePostInfo}>\n      <div className=\"update-post-form__title\">\n        Update post:\n      </div>\n      <input\n        type=\"text\"\n        placeholder=\"Enter new Title\"\n        value={newTitle}\n        onChange={event => setNewTitle(event.target.value)}\n        className=\"update-post-form__input\"\n      />\n      <input\n        type=\"text\"\n        placeholder=\"Enter new Body\"\n        value={newBody}\n        onChange={event => setNewBody(event.target.value)}\n        className=\"update-post-form__input\"\n      />\n      <button\n        type=\"submit\"\n        className=\"update-post-form__button\"\n        onClick={() => setUpdatedPostId(id)}\n      >\n        Update Info\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport {\n  createPost,\n  deletePost,\n  getPosts,\n  updatePost,\n} from '../../api';\nimport { PostInfo } from '../PostInfo/PostInfo';\nimport './PostList.scss';\nimport { UpdatePostForm } from '../UpdatePostForm/UpdatePostForm';\n\ntype Props = {\n  posts: Post[],\n  loadPosts: () => Promise<void>\n};\n\nexport const PostsList: React.FC<Props> = (props) => {\n  const { posts, loadPosts } = props;\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [newTitle, setNewTitle] = useState('');\n  const [newBody, setNewBody] = useState('');\n  const [updatedPostId, setUpdatedPostId] = useState(0);\n\n  const clearForm = () => {\n    setNewTitle('');\n    setNewBody('');\n  };\n\n  const addPost = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    await createPost(newTitle, newBody);\n    await getPosts();\n    await updatePost(updatedPostId, newTitle, newBody);\n\n    clearForm();\n  };\n\n  useEffect(() => {\n    loadPosts();\n  }, [updatedPostId]);\n\n  const removePost = async (postId: number) => {\n    await deletePost(postId);\n    await loadPosts();\n  };\n\n  return (\n    <div className=\"posts\">\n      <form className=\"create-post\" onSubmit={addPost}>\n        <div className=\"create-post__title\">Add new Post:</div>\n        <input\n          placeholder=\"Enter Title\"\n          className=\"create-post__input\"\n          type=\"text\"\n          value={newTitle}\n          name=\"title\"\n          onChange={event => setNewTitle(event.target.value)}\n          required\n        />\n\n        <input\n          placeholder=\"Enter Body\"\n          className=\"create-post__input\"\n          name=\"body\"\n          value={newBody}\n          onChange={event => setNewBody(event.target.value)}\n          required\n        />\n\n        <button\n          type=\"submit\"\n          className=\"create-post__submit-button\"\n          onClick={addPost}\n        >\n          Add a post\n        </button>\n      </form>\n\n      <ul className=\"posts__list\">\n        {posts.map(post => (\n          <li key={post.id} className=\"posts__item\">\n            <div className=\"posts__title\">\n              <span className=\"posts__title--start\">Title:</span>\n              {' '}\n              {post.title}\n            </div>\n            <div className=\"posts__hood-buttons-block\">\n              {selectedPostId === post.id\n                ? (\n                  <>\n                    <button\n                      type=\"button\"\n                      className=\"posts__hood-button\"\n                      onClick={() => setSelectedPostId(0)}\n                    >\n                      Hide post info\n                    </button>\n                    {selectedPostId === post.id\n                    && <PostInfo post={post} selectedPostId={selectedPostId} />}\n                    <UpdatePostForm\n                      loadPosts={loadPosts}\n                      setUpdatedPostId={setUpdatedPostId}\n                      id={post.id}\n                    />\n                  </>\n                )\n                : (\n                  <button\n                    type=\"button\"\n                    className=\"posts__hood-button posts__hood-button--show\"\n                    onClick={() => setSelectedPostId(post.id)}\n                  >\n                    Show post info\n                  </button>\n                )}\n\n              <button\n                type=\"button\"\n                className=\"posts__hood-button\"\n                onClick={() => removePost(post.id)}\n              >\n                Delete post\n              </button>\n            </div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { getPosts } from './api';\nimport './App.scss';\nimport { PostsList } from './components/PostsList/PostsList';\n\nexport const App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n\n  /* const AddPost = (newPost: Post) => {\n    if (!posts.some(post => post.id === newPost.id)) {\n      setPosts([...posts, newPost]);\n    }\n  }; */\n\n  const loadPosts = async () => {\n    const postsArray = await getPosts();\n\n    setPosts(postsArray);\n  };\n\n  useEffect(() => {\n    loadPosts();\n  }, [setPosts]);\n\n  return (\n    <div className=\"body\">\n      <div className=\"title\">Posts List</div>\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <PostsList posts={posts} loadPosts={loadPosts} />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}